{"ast":null,"code":"function t() {\n  return t = Object.assign ? Object.assign.bind() : function (t) {\n    for (var s = 1; s < arguments.length; s++) {\n      var e = arguments[s];\n      for (var n in e) {\n        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);\n      }\n    }\n    return t;\n  }, t.apply(this, arguments);\n}\nvar s = {\n    strings: [\"These are the default values...\", \"You know what you should do?\", \"Use your own!\", \"Have a great day!\"],\n    stringsElement: null,\n    typeSpeed: 0,\n    startDelay: 0,\n    backSpeed: 0,\n    smartBackspace: !0,\n    shuffle: !1,\n    backDelay: 700,\n    fadeOut: !1,\n    fadeOutClass: \"typed-fade-out\",\n    fadeOutDelay: 500,\n    loop: !1,\n    loopCount: Infinity,\n    showCursor: !0,\n    cursorChar: \"|\",\n    autoInsertCss: !0,\n    attr: null,\n    bindInputFocusEvents: !1,\n    contentType: \"html\",\n    onBegin: function onBegin(t) {},\n    onComplete: function onComplete(t) {},\n    preStringTyped: function preStringTyped(t, s) {},\n    onStringTyped: function onStringTyped(t, s) {},\n    onLastStringBackspaced: function onLastStringBackspaced(t) {},\n    onTypingPaused: function onTypingPaused(t, s) {},\n    onTypingResumed: function onTypingResumed(t, s) {},\n    onReset: function onReset(t) {},\n    onStop: function onStop(t, s) {},\n    onStart: function onStart(t, s) {},\n    onDestroy: function onDestroy(t) {}\n  },\n  e = new ( /*#__PURE__*/function () {\n    function e() {}\n    var n = e.prototype;\n    return n.load = function (e, n, i) {\n      if (e.el = \"string\" == typeof i ? document.querySelector(i) : i, e.options = t({}, s, n), e.isInput = \"input\" === e.el.tagName.toLowerCase(), e.attr = e.options.attr, e.bindInputFocusEvents = e.options.bindInputFocusEvents, e.showCursor = !e.isInput && e.options.showCursor, e.cursorChar = e.options.cursorChar, e.cursorBlinking = !0, e.elContent = e.attr ? e.el.getAttribute(e.attr) : e.el.textContent, e.contentType = e.options.contentType, e.typeSpeed = e.options.typeSpeed, e.startDelay = e.options.startDelay, e.backSpeed = e.options.backSpeed, e.smartBackspace = e.options.smartBackspace, e.backDelay = e.options.backDelay, e.fadeOut = e.options.fadeOut, e.fadeOutClass = e.options.fadeOutClass, e.fadeOutDelay = e.options.fadeOutDelay, e.isPaused = !1, e.strings = e.options.strings.map(function (t) {\n        return t.trim();\n      }), e.stringsElement = \"string\" == typeof e.options.stringsElement ? document.querySelector(e.options.stringsElement) : e.options.stringsElement, e.stringsElement) {\n        e.strings = [], e.stringsElement.style.cssText = \"clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;\";\n        var r = Array.prototype.slice.apply(e.stringsElement.children),\n          o = r.length;\n        if (o) for (var a = 0; a < o; a += 1) {\n          e.strings.push(r[a].innerHTML.trim());\n        }\n      }\n      for (var u in e.strPos = 0, e.currentElContent = this.getCurrentElContent(e), e.currentElContent && e.currentElContent.length > 0 && (e.strPos = e.currentElContent.length - 1, e.strings.unshift(e.currentElContent)), e.sequence = [], e.strings) {\n        e.sequence[u] = u;\n      }\n      e.arrayPos = 0, e.stopNum = 0, e.loop = e.options.loop, e.loopCount = e.options.loopCount, e.curLoop = 0, e.shuffle = e.options.shuffle, e.pause = {\n        status: !1,\n        typewrite: !0,\n        curString: \"\",\n        curStrPos: 0\n      }, e.typingComplete = !1, e.autoInsertCss = e.options.autoInsertCss, e.autoInsertCss && (this.appendCursorAnimationCss(e), this.appendFadeOutAnimationCss(e));\n    }, n.getCurrentElContent = function (t) {\n      return t.attr ? t.el.getAttribute(t.attr) : t.isInput ? t.el.value : \"html\" === t.contentType ? t.el.innerHTML : t.el.textContent;\n    }, n.appendCursorAnimationCss = function (t) {\n      var s = \"data-typed-js-cursor-css\";\n      if (t.showCursor && !document.querySelector(\"[\" + s + \"]\")) {\n        var e = document.createElement(\"style\");\n        e.setAttribute(s, \"true\"), e.innerHTML = \"\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      \", document.body.appendChild(e);\n      }\n    }, n.appendFadeOutAnimationCss = function (t) {\n      var s = \"data-typed-fadeout-js-css\";\n      if (t.fadeOut && !document.querySelector(\"[\" + s + \"]\")) {\n        var e = document.createElement(\"style\");\n        e.setAttribute(s, \"true\"), e.innerHTML = \"\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      \", document.body.appendChild(e);\n      }\n    }, e;\n  }())(),\n  n = new ( /*#__PURE__*/function () {\n    function t() {}\n    var s = t.prototype;\n    return s.typeHtmlChars = function (t, s, e) {\n      if (\"html\" !== e.contentType) return s;\n      var n = t.substring(s).charAt(0);\n      if (\"<\" === n || \"&\" === n) {\n        var i;\n        for (i = \"<\" === n ? \">\" : \";\"; t.substring(s + 1).charAt(0) !== i && !(1 + ++s > t.length);) {\n          ;\n        }\n        s++;\n      }\n      return s;\n    }, s.backSpaceHtmlChars = function (t, s, e) {\n      if (\"html\" !== e.contentType) return s;\n      var n = t.substring(s).charAt(0);\n      if (\">\" === n || \";\" === n) {\n        var i;\n        for (i = \">\" === n ? \"<\" : \"&\"; t.substring(s - 1).charAt(0) !== i && !(--s < 0);) {\n          ;\n        }\n        s--;\n      }\n      return s;\n    }, t;\n  }())(),\n  i = /*#__PURE__*/function () {\n    function t(t, s) {\n      e.load(this, s, t), this.begin();\n    }\n    var s = t.prototype;\n    return s.toggle = function () {\n      this.pause.status ? this.start() : this.stop();\n    }, s.stop = function () {\n      this.typingComplete || this.pause.status || (this.toggleBlinking(!0), this.pause.status = !0, this.options.onStop(this.arrayPos, this));\n    }, s.start = function () {\n      this.typingComplete || this.pause.status && (this.pause.status = !1, this.pause.typewrite ? this.typewrite(this.pause.curString, this.pause.curStrPos) : this.backspace(this.pause.curString, this.pause.curStrPos), this.options.onStart(this.arrayPos, this));\n    }, s.destroy = function () {\n      this.reset(!1), this.options.onDestroy(this);\n    }, s.reset = function (t) {\n      void 0 === t && (t = !0), clearInterval(this.timeout), this.replaceText(\"\"), this.cursor && this.cursor.parentNode && (this.cursor.parentNode.removeChild(this.cursor), this.cursor = null), this.strPos = 0, this.arrayPos = 0, this.curLoop = 0, t && (this.insertCursor(), this.options.onReset(this), this.begin());\n    }, s.begin = function () {\n      var t = this;\n      this.options.onBegin(this), this.typingComplete = !1, this.shuffleStringsIfNeeded(this), this.insertCursor(), this.bindInputFocusEvents && this.bindFocusEvents(), this.timeout = setTimeout(function () {\n        0 === t.strPos ? t.typewrite(t.strings[t.sequence[t.arrayPos]], t.strPos) : t.backspace(t.strings[t.sequence[t.arrayPos]], t.strPos);\n      }, this.startDelay);\n    }, s.typewrite = function (t, s) {\n      var e = this;\n      this.fadeOut && this.el.classList.contains(this.fadeOutClass) && (this.el.classList.remove(this.fadeOutClass), this.cursor && this.cursor.classList.remove(this.fadeOutClass));\n      var i = this.humanizer(this.typeSpeed),\n        r = 1;\n      !0 !== this.pause.status ? this.timeout = setTimeout(function () {\n        s = n.typeHtmlChars(t, s, e);\n        var i = 0,\n          o = t.substring(s);\n        if (\"^\" === o.charAt(0) && /^\\^\\d+/.test(o)) {\n          var a = 1;\n          a += (o = /\\d+/.exec(o)[0]).length, i = parseInt(o), e.temporaryPause = !0, e.options.onTypingPaused(e.arrayPos, e), t = t.substring(0, s) + t.substring(s + a), e.toggleBlinking(!0);\n        }\n        if (\"`\" === o.charAt(0)) {\n          for (; \"`\" !== t.substring(s + r).charAt(0) && (r++, !(s + r > t.length));) {\n            ;\n          }\n          var u = t.substring(0, s),\n            p = t.substring(u.length + 1, s + r),\n            c = t.substring(s + r + 1);\n          t = u + p + c, r--;\n        }\n        e.timeout = setTimeout(function () {\n          e.toggleBlinking(!1), s >= t.length ? e.doneTyping(t, s) : e.keepTyping(t, s, r), e.temporaryPause && (e.temporaryPause = !1, e.options.onTypingResumed(e.arrayPos, e));\n        }, i);\n      }, i) : this.setPauseStatus(t, s, !0);\n    }, s.keepTyping = function (t, s, e) {\n      0 === s && (this.toggleBlinking(!1), this.options.preStringTyped(this.arrayPos, this));\n      var n = t.substring(0, s += e);\n      this.replaceText(n), this.typewrite(t, s);\n    }, s.doneTyping = function (t, s) {\n      var e = this;\n      this.options.onStringTyped(this.arrayPos, this), this.toggleBlinking(!0), this.arrayPos === this.strings.length - 1 && (this.complete(), !1 === this.loop || this.curLoop === this.loopCount) || (this.timeout = setTimeout(function () {\n        e.backspace(t, s);\n      }, this.backDelay));\n    }, s.backspace = function (t, s) {\n      var e = this;\n      if (!0 !== this.pause.status) {\n        if (this.fadeOut) return this.initFadeOut();\n        this.toggleBlinking(!1);\n        var i = this.humanizer(this.backSpeed);\n        this.timeout = setTimeout(function () {\n          s = n.backSpaceHtmlChars(t, s, e);\n          var i = t.substring(0, s);\n          if (e.replaceText(i), e.smartBackspace) {\n            var r = e.strings[e.arrayPos + 1];\n            e.stopNum = r && i === r.substring(0, s) ? s : 0;\n          }\n          s > e.stopNum ? (s--, e.backspace(t, s)) : s <= e.stopNum && (e.arrayPos++, e.arrayPos === e.strings.length ? (e.arrayPos = 0, e.options.onLastStringBackspaced(), e.shuffleStringsIfNeeded(), e.begin()) : e.typewrite(e.strings[e.sequence[e.arrayPos]], s));\n        }, i);\n      } else this.setPauseStatus(t, s, !1);\n    }, s.complete = function () {\n      this.options.onComplete(this), this.loop ? this.curLoop++ : this.typingComplete = !0;\n    }, s.setPauseStatus = function (t, s, e) {\n      this.pause.typewrite = e, this.pause.curString = t, this.pause.curStrPos = s;\n    }, s.toggleBlinking = function (t) {\n      this.cursor && (this.pause.status || this.cursorBlinking !== t && (this.cursorBlinking = t, t ? this.cursor.classList.add(\"typed-cursor--blink\") : this.cursor.classList.remove(\"typed-cursor--blink\")));\n    }, s.humanizer = function (t) {\n      return Math.round(Math.random() * t / 2) + t;\n    }, s.shuffleStringsIfNeeded = function () {\n      this.shuffle && (this.sequence = this.sequence.sort(function () {\n        return Math.random() - .5;\n      }));\n    }, s.initFadeOut = function () {\n      var t = this;\n      return this.el.className += \" \" + this.fadeOutClass, this.cursor && (this.cursor.className += \" \" + this.fadeOutClass), setTimeout(function () {\n        t.arrayPos++, t.replaceText(\"\"), t.strings.length > t.arrayPos ? t.typewrite(t.strings[t.sequence[t.arrayPos]], 0) : (t.typewrite(t.strings[0], 0), t.arrayPos = 0);\n      }, this.fadeOutDelay);\n    }, s.replaceText = function (t) {\n      this.attr ? this.el.setAttribute(this.attr, t) : this.isInput ? this.el.value = t : \"html\" === this.contentType ? this.el.innerHTML = t : this.el.textContent = t;\n    }, s.bindFocusEvents = function () {\n      var t = this;\n      this.isInput && (this.el.addEventListener(\"focus\", function (s) {\n        t.stop();\n      }), this.el.addEventListener(\"blur\", function (s) {\n        t.el.value && 0 !== t.el.value.length || t.start();\n      }));\n    }, s.insertCursor = function () {\n      this.showCursor && (this.cursor || (this.cursor = document.createElement(\"span\"), this.cursor.className = \"typed-cursor\", this.cursor.setAttribute(\"aria-hidden\", !0), this.cursor.innerHTML = this.cursorChar, this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling)));\n    }, t;\n  }();\nexport { i as default };","map":{"version":3,"mappings":"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","names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","initializer","Initializer","_proto","load","options","elementId","el","document","querySelector","_extends","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","s","trim","style","cssText","Array","prototype","slice","apply","children","stringsLength","length","i","push","innerHTML","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","cssDataName","css","createElement","setAttribute","body","appendChild","htmlParser","HTMLParser","typeHtmlChars","curChar","substring","charAt","endTag","backSpaceHtmlChars","Typed","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","_this","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanize","humanizer","numChars","_this2","pauseTime","substr","test","skip","exec","parseInt","temporaryPause","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","complete","_this3","initFadeOut","_this4","curStringAtPosition","isTyping","isBlinking","add","speed","Math","round","random","sort","className","_this5","str","_this6","addEventListener","e","insertBefore","nextSibling"],"sources":["/Users/chloengo/Documents/GitHub/chloe.aesthetically/node_modules/typed.js/src/defaults.js","/Users/chloengo/Documents/GitHub/chloe.aesthetically/node_modules/typed.js/src/initializer.js","/Users/chloengo/Documents/GitHub/chloe.aesthetically/node_modules/typed.js/src/html-parser.js","/Users/chloengo/Documents/GitHub/chloe.aesthetically/node_modules/typed.js/src/typed.js"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}